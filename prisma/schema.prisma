// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String
  role         String   @default("tenant") // 'admin', 'landlord', 'tenant'
  memberships  Membership[]
  invitations  Invitation[] @relation("InvitedUser")
  sentInvitations Invitation[] @relation("InvitingUser")
  properties   Property[]
  createdAt    DateTime @default(now())
}

model Household {
  id         Int          @id @default(autoincrement())
  name       String
  inviteCode String       @unique
  memberships Membership[]
  createdAt  DateTime     @default(now())
}

model Property {
  id           Int          @id @default(autoincrement())
  name         String
  addressLine1 String
  addressLine2 String?
  city         String
  county       String
  postcode     String
  propertyType String       // 'house', 'flat', 'studio', 'shared', 'student'
  bedrooms     Int
  bathrooms    Int
  description  String?
  documents    Document[]
  memberships  Membership[]
  invitations  Invitation[]
  owner        User         @relation(fields: [ownerId], references: [id])
  ownerId      Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Document {
  id         Int      @id @default(autoincrement())
  name       String
  filename   String
  fileType   String
  fileSize   Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
  createdAt  DateTime @default(now())
}

model Invitation {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  email      String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
  invitedBy  User     @relation("InvitingUser", fields: [invitedById], references: [id])
  invitedById Int
  invitedUser User?   @relation("InvitedUser", fields: [invitedUserId], references: [id])
  invitedUserId Int?
  status     String   @default("pending") // 'pending', 'accepted', 'expired'
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model Membership {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  household   Household? @relation(fields: [householdId], references: [id])
  householdId Int?
  property    Property?  @relation(fields: [propertyId], references: [id])
  propertyId  Int?
  role        String     // 'landlord' or 'tenant'
  createdAt   DateTime   @default(now())
}
